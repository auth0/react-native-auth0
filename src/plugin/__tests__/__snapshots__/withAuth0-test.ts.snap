// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`addAndroidAuth0Manifest should throw if domain is not present when config sent as array 1`] = `"No auth0 domain specified in expo config"`;

exports[`addAndroidAuth0Manifest should throw if domain is not present when config sent as object 1`] = `"No auth0 domain specified in expo config"`;

exports[`addAndroidAuth0Manifest should throw if scheme & applicationId is not present 1`] = `"No auth0 scheme specified or package found in expo config"`;

exports[`addAndroidAuth0Manifest with multiple domains and schemes should have that value 1`] = `
{
  "modRawConfig": {
    "name": " ",
    "slug": " ",
  },
  "modRequest": {
    "introspect": true,
    "modName": "",
    "platform": "android",
    "platformProjectRoot": "",
    "projectRoot": "",
  },
  "modResults": {
    "manifest": {
      "$": {
        "xmlns:android": "http://schemas.android.com/apk/res/android",
        "xmlns:tools": "http://schemas.android.com/tools",
      },
      "application": [
        {
          "$": {
            "android:name": "com.auth0.android.tests.MainApplication",
          },
          "activity": [
            {
              "$": {
                "android:name": "com.auth0.android.provider.RedirectActivity",
              },
              "intent-filter": [
                {
                  "action": [
                    {
                      "$": {
                        "android:name": "android.intent.action.VIEW",
                      },
                    },
                  ],
                  "category": [
                    {
                      "$": {
                        "android:name": "android.intent.category.DEFAULT",
                      },
                    },
                    {
                      "$": {
                        "android:name": "android.intent.category.BROWSABLE",
                      },
                    },
                  ],
                  "data": [
                    {
                      "$": {
                        "android:host": "sample.us.auth0.com",
                        "android:scheme": "com.sample.us.auth0",
                      },
                    },
                    {
                      "$": {
                        "android:host": "sample.eu.auth0.com",
                        "android:scheme": "com.sample.eu.auth0",
                      },
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "queries": [],
    },
  },
  "name": " ",
  "slug": " ",
}
`;

exports[`addAndroidAuth0Manifest with multiple domains should have that value and package name as scheme 1`] = `
{
  "modRawConfig": {
    "name": " ",
    "slug": " ",
  },
  "modRequest": {
    "introspect": true,
    "modName": "",
    "platform": "android",
    "platformProjectRoot": "",
    "projectRoot": "",
  },
  "modResults": {
    "manifest": {
      "$": {
        "xmlns:android": "http://schemas.android.com/apk/res/android",
        "xmlns:tools": "http://schemas.android.com/tools",
      },
      "application": [
        {
          "$": {
            "android:name": "com.auth0.android.tests.MainApplication",
          },
          "activity": [
            {
              "$": {
                "android:name": "com.auth0.android.provider.RedirectActivity",
              },
              "intent-filter": [
                {
                  "action": [
                    {
                      "$": {
                        "android:name": "android.intent.action.VIEW",
                      },
                    },
                  ],
                  "category": [
                    {
                      "$": {
                        "android:name": "android.intent.category.DEFAULT",
                      },
                    },
                    {
                      "$": {
                        "android:name": "android.intent.category.BROWSABLE",
                      },
                    },
                  ],
                  "data": [
                    {
                      "$": {
                        "android:host": "sample.us.auth0.com",
                        "android:scheme": "com.sample.application.auth0",
                      },
                    },
                    {
                      "$": {
                        "android:host": "sample.eu.auth0.com",
                        "android:scheme": "com.sample.application.auth0",
                      },
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "queries": [],
    },
  },
  "name": " ",
  "slug": " ",
}
`;

exports[`addAndroidAuth0Manifest with scheme should have that value 1`] = `
{
  "modRawConfig": {
    "name": " ",
    "slug": " ",
  },
  "modRequest": {
    "introspect": true,
    "modName": "",
    "platform": "android",
    "platformProjectRoot": "",
    "projectRoot": "",
  },
  "modResults": {
    "manifest": {
      "$": {
        "xmlns:android": "http://schemas.android.com/apk/res/android",
        "xmlns:tools": "http://schemas.android.com/tools",
      },
      "application": [
        {
          "$": {
            "android:name": "com.auth0.android.tests.MainApplication",
          },
          "activity": [
            {
              "$": {
                "android:name": "com.auth0.android.provider.RedirectActivity",
              },
              "intent-filter": [
                {
                  "action": [
                    {
                      "$": {
                        "android:name": "android.intent.action.VIEW",
                      },
                    },
                  ],
                  "category": [
                    {
                      "$": {
                        "android:name": "android.intent.category.DEFAULT",
                      },
                    },
                    {
                      "$": {
                        "android:name": "android.intent.category.BROWSABLE",
                      },
                    },
                  ],
                  "data": [
                    {
                      "$": {
                        "android:host": "sample.auth0.com",
                        "android:scheme": "com.sample.application",
                      },
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "queries": [],
    },
  },
  "name": " ",
  "slug": " ",
}
`;

exports[`addAndroidAuth0Manifest without scheme should have package name 1`] = `
{
  "modRawConfig": {
    "name": " ",
    "slug": " ",
  },
  "modRequest": {
    "introspect": true,
    "modName": "",
    "platform": "android",
    "platformProjectRoot": "",
    "projectRoot": "",
  },
  "modResults": {
    "manifest": {
      "$": {
        "xmlns:android": "http://schemas.android.com/apk/res/android",
        "xmlns:tools": "http://schemas.android.com/tools",
      },
      "application": [
        {
          "$": {
            "android:name": "com.auth0.android.tests.MainApplication",
          },
          "activity": [
            {
              "$": {
                "android:name": "com.auth0.android.provider.RedirectActivity",
              },
              "intent-filter": [
                {
                  "action": [
                    {
                      "$": {
                        "android:name": "android.intent.action.VIEW",
                      },
                    },
                  ],
                  "category": [
                    {
                      "$": {
                        "android:name": "android.intent.category.DEFAULT",
                      },
                    },
                    {
                      "$": {
                        "android:name": "android.intent.category.BROWSABLE",
                      },
                    },
                  ],
                  "data": [
                    {
                      "$": {
                        "android:host": "sample.auth0.com",
                        "android:scheme": "com.auth0.sample.auth0",
                      },
                    },
                  ],
                },
              ],
            },
          ],
        },
      ],
      "queries": [],
    },
  },
  "name": " ",
  "slug": " ",
}
`;

exports[`addAuth0AppDelegateCode does not modify the AppDelegate 1`] = `
"
// This AppDelegate template is used in Expo SDK 43 and newer
// It is (nearly) identical to the pure template used when
// creating a bare React Native app (without Expo)

#import "AppDelegate.h"

#import <React/RCTBridge.h>
#import <React/RCTBundleURLProvider.h>
#import <React/RCTRootView.h>
#import <React/RCTLinkingManager.h>
#import <React/RCTConvert.h>

#if defined(FB_SONARKIT_ENABLED) && __has_include(<FlipperKit/FlipperClient.h>)
#import <FlipperKit/FlipperClient.h>
#import <FlipperKitLayoutPlugin/FlipperKitLayoutPlugin.h>
#import <FlipperKitUserDefaultsPlugin/FKUserDefaultsPlugin.h>
#import <FlipperKitNetworkPlugin/FlipperKitNetworkPlugin.h>
#import <SKIOSNetworkPlugin/SKIOSNetworkAdapter.h>
#import <FlipperKitReactPlugin/FlipperKitReactPlugin.h>

static void InitializeFlipper(UIApplication *application) {
  FlipperClient *client = [FlipperClient sharedClient];
  SKDescriptorMapper *layoutDescriptorMapper = [[SKDescriptorMapper alloc] initWithDefaults];
  [client addPlugin:[[FlipperKitLayoutPlugin alloc] initWithRootNode:application withDescriptorMapper:layoutDescriptorMapper]];
  [client addPlugin:[[FKUserDefaultsPlugin alloc] initWithSuiteName:nil]];
  [client addPlugin:[FlipperKitReactPlugin new]];
  [client addPlugin:[[FlipperKitNetworkPlugin alloc] initWithNetworkAdapter:[SKIOSNetworkAdapter new]]];
  [client start];
}
#endif

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
#if defined(FB_SONARKIT_ENABLED) && __has_include(<FlipperKit/FlipperClient.h>)
  InitializeFlipper(application);
#endif
  
  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];
  RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@"main" initialProperties:nil];
  id rootViewBackgroundColor = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"RCTRootViewBackgroundColor"];
  if (rootViewBackgroundColor != nil) {
    rootView.backgroundColor = [RCTConvert UIColor:rootViewBackgroundColor];
  } else {
    rootView.backgroundColor = [UIColor whiteColor];
  }

  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
  UIViewController *rootViewController = [UIViewController new];
  rootViewController.view = rootView;
  self.window.rootViewController = rootViewController;
  [self.window makeKeyAndVisible];

  [super application:application didFinishLaunchingWithOptions:launchOptions];

  return YES;
 }

- (NSArray<id<RCTBridgeModule>> *)extraModulesForBridge:(RCTBridge *)bridge
{
  // If you'd like to export some custom RCTBridgeModules, add them here!
  return @[];
}

- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge {
 #ifdef DEBUG
  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@"index" fallbackResource:nil];
 #else
  return [[NSBundle mainBundle] URLForResource:@"main" withExtension:@"jsbundle"];
 #endif
}

// Linking API
- (BOOL)application:(UIApplication *)application openURL:(NSURL *)url options:(NSDictionary<UIApplicationOpenURLOptionsKey,id> *)options {
  return [RCTLinkingManager application:application openURL:url options:options];
}

// Universal Links
- (BOOL)application:(UIApplication *)application continueUserActivity:(nonnull NSUserActivity *)userActivity restorationHandler:(nonnull void (^)(NSArray<id<UIUserActivityRestoring>> * _Nullable))restorationHandler {
  return [RCTLinkingManager application:application
                   continueUserActivity:userActivity
                     restorationHandler:restorationHandler];
}

@end
"
`;

exports[`addAuth0AppDelegateCode modifies the AppDelegate 1`] = `
"
// This AppDelegate template is used in Expo SDK 43 and newer
// It is (nearly) identical to the pure template used when
// creating a bare React Native app (without Expo)

#import "AppDelegate.h"

#import <React/RCTBridge.h>
// @generated begin react-native-auth0-import - expo prebuild (DO NOT MODIFY) sync-60472b7c5bde1787041c5dcbb357e68108fe1334
#import <React/RCTLinkingManager.h>
// @generated end react-native-auth0-import
#import <React/RCTBundleURLProvider.h>
#import <React/RCTRootView.h>
#import <React/RCTConvert.h>

#if defined(FB_SONARKIT_ENABLED) && __has_include(<FlipperKit/FlipperClient.h>)
#import <FlipperKit/FlipperClient.h>
#import <FlipperKitLayoutPlugin/FlipperKitLayoutPlugin.h>
#import <FlipperKitUserDefaultsPlugin/FKUserDefaultsPlugin.h>
#import <FlipperKitNetworkPlugin/FlipperKitNetworkPlugin.h>
#import <SKIOSNetworkPlugin/SKIOSNetworkAdapter.h>
#import <FlipperKitReactPlugin/FlipperKitReactPlugin.h>

static void InitializeFlipper(UIApplication *application) {
  FlipperClient *client = [FlipperClient sharedClient];
  SKDescriptorMapper *layoutDescriptorMapper = [[SKDescriptorMapper alloc] initWithDefaults];
  [client addPlugin:[[FlipperKitLayoutPlugin alloc] initWithRootNode:application withDescriptorMapper:layoutDescriptorMapper]];
  [client addPlugin:[[FKUserDefaultsPlugin alloc] initWithSuiteName:nil]];
  [client addPlugin:[FlipperKitReactPlugin new]];
  [client addPlugin:[[FlipperKitNetworkPlugin alloc] initWithNetworkAdapter:[SKIOSNetworkAdapter new]]];
  [client start];
}
#endif

@implementation AppDelegate

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
#if defined(FB_SONARKIT_ENABLED) && __has_include(<FlipperKit/FlipperClient.h>)
  InitializeFlipper(application);
#endif
  
  RCTBridge *bridge = [[RCTBridge alloc] initWithDelegate:self launchOptions:launchOptions];
  RCTRootView *rootView = [[RCTRootView alloc] initWithBridge:bridge moduleName:@"main" initialProperties:nil];
  id rootViewBackgroundColor = [[NSBundle mainBundle] objectForInfoDictionaryKey:@"RCTRootViewBackgroundColor"];
  if (rootViewBackgroundColor != nil) {
    rootView.backgroundColor = [RCTConvert UIColor:rootViewBackgroundColor];
  } else {
    rootView.backgroundColor = [UIColor whiteColor];
  }

  self.window = [[UIWindow alloc] initWithFrame:[UIScreen mainScreen].bounds];
  UIViewController *rootViewController = [UIViewController new];
  rootViewController.view = rootView;
  self.window.rootViewController = rootViewController;
  [self.window makeKeyAndVisible];

  [super application:application didFinishLaunchingWithOptions:launchOptions];

  return YES;
 }

- (NSArray<id<RCTBridgeModule>> *)extraModulesForBridge:(RCTBridge *)bridge
{
  // If you'd like to export some custom RCTBridgeModules, add them here!
  return @[];
}

- (NSURL *)sourceURLForBridge:(RCTBridge *)bridge {
 #ifdef DEBUG
  return [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@"index" fallbackResource:nil];
 #else
  return [[NSBundle mainBundle] URLForResource:@"main" withExtension:@"jsbundle"];
 #endif
}

// @generated begin react-native-auth0-linking - expo prebuild (DO NOT MODIFY) sync-4120cf784d32ef9e73c7c71def92162e38e5087f
- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url
            options:(NSDictionary<UIApplicationOpenURLOptionsKey, id> *)options
{
  return [RCTLinkingManager application:app openURL:url options:options];
}
// @generated end react-native-auth0-linking
@end
"
`;

exports[`addIOSAuth0ConfigInInfoPList should add all the schemes 1`] = `
{
  "modRequest": {
    "introspect": true,
    "modName": "",
    "platform": "ios",
    "platformProjectRoot": "",
    "projectRoot": "",
  },
  "modResults": {
    "CFBundleURLTypes": [
      {
        "CFBundleURLName": "auth0",
        "CFBundleURLSchemes": [
          "com.sample.us.auth0",
          "com.sample.eu.auth0",
        ],
      },
    ],
    "contents": "",
    "path": "",
  },
  "name": " ",
  "slug": " ",
}
`;

exports[`addIOSAuth0ConfigInInfoPList should append all the schemes 1`] = `
{
  "modRequest": {
    "introspect": true,
    "modName": "",
    "platform": "ios",
    "platformProjectRoot": "",
    "projectRoot": "",
  },
  "modResults": {
    "CFBundleURLTypes": [
      {
        "CFBundleURLName": "auth0",
        "CFBundleURLSchemes": [
          "com.differentsample.auth0",
          "com.sample.us.auth0",
          "com.sample.eu.auth0",
        ],
      },
    ],
    "contents": "",
    "path": "",
  },
  "name": " ",
  "slug": " ",
}
`;

exports[`addIOSAuth0ConfigInInfoPList should append if another scheme is already present 1`] = `
{
  "modRequest": {
    "introspect": true,
    "modName": "",
    "platform": "ios",
    "platformProjectRoot": "",
    "projectRoot": "",
  },
  "modResults": {
    "CFBundleURLTypes": [
      {
        "CFBundleURLName": "auth0",
        "CFBundleURLSchemes": [
          "com.differentsample.auth0",
          "com.sample.auth0",
        ],
      },
    ],
    "contents": "",
    "path": "",
  },
  "name": " ",
  "slug": " ",
}
`;

exports[`addIOSAuth0ConfigInInfoPList should have the bundle identifier if scheme is not provided  1`] = `
{
  "ios": {
    "bundleIdentifier": "com.sample.auth0",
  },
  "modRequest": {
    "introspect": true,
    "modName": "",
    "platform": "ios",
    "platformProjectRoot": "",
    "projectRoot": "",
  },
  "modResults": {
    "CFBundleURLTypes": [
      {
        "CFBundleURLName": "auth0",
        "CFBundleURLSchemes": [
          "com.sample.auth0.auth0",
        ],
      },
    ],
    "contents": "",
    "path": "",
  },
  "name": " ",
  "slug": " ",
}
`;

exports[`addIOSAuth0ConfigInInfoPList should have the bundle identifier if scheme is not provided  2`] = `
{
  "ios": {
    "bundleIdentifier": "com.sample.auth0",
  },
  "modRequest": {
    "introspect": true,
    "modName": "",
    "platform": "ios",
    "platformProjectRoot": "",
    "projectRoot": "",
  },
  "modResults": {
    "CFBundleURLTypes": [
      {
        "CFBundleURLName": "auth0",
        "CFBundleURLSchemes": [
          "com.sample.auth0.auth0",
        ],
      },
    ],
    "contents": "",
    "path": "",
  },
  "name": " ",
  "slug": " ",
}
`;

exports[`addIOSAuth0ConfigInInfoPList should have the scheme provided  1`] = `
{
  "ios": {
    "bundleIdentifier": "different.bundle.id",
  },
  "modRequest": {
    "introspect": true,
    "modName": "",
    "platform": "ios",
    "platformProjectRoot": "",
    "projectRoot": "",
  },
  "modResults": {
    "CFBundleURLTypes": [
      {
        "CFBundleURLName": "auth0",
        "CFBundleURLSchemes": [
          "com.sample.auth0",
        ],
      },
    ],
    "contents": "",
    "path": "",
  },
  "name": " ",
  "slug": " ",
}
`;

exports[`addIOSAuth0ConfigInInfoPList should ignore if scheme is already present 1`] = `
{
  "modRequest": {
    "introspect": true,
    "modName": "",
    "platform": "ios",
    "platformProjectRoot": "",
    "projectRoot": "",
  },
  "modResults": {
    "CFBundleURLTypes": [
      {
        "CFBundleURLName": "auth0",
        "CFBundleURLSchemes": [
          "com.sample.auth0",
        ],
      },
    ],
    "contents": "",
    "path": "",
  },
  "name": " ",
  "slug": " ",
}
`;

exports[`addIOSAuth0ConfigInInfoPList should throw if scheme and bundle identifier is not defined 1`] = `"No auth0 scheme specified or bundle identifier found in expo config"`;

exports[`addIOSAuth0ConfigInInfoPList should throw if scheme and bundle identifier is not defined 2`] = `"No auth0 scheme specified or bundle identifier found in expo config"`;
